/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

var instanceOf = require( '@stdlib/assert/instance-of' );
var setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );

var newlineRegex = /\r\n|\r|\n/g;
var threshhold = 0.9; // at least 90% of the rows should pass

/* eslint-disable no-invalid-this */

/**
* DelimitterGuesser constructor.
*
* @param {Object} [options] - constructor options
* @returns {DelimiterGuesser} DelimiterGuesser instance
*/
function DelimiterGuesser( options = {} ) {
	if ( !instanceOf( this, DelimiterGuesser )) {
		return new DelimiterGuesser( options );
	}
	this.watermark = options.watermark || 10;
	this.estimatedRowCount = 1;
	this.buffer = ''; // somehow make this an array maybe the barrier is newline regex matching to count rows

	return this;
}

/**
* When called, the function pushes to the guesser's buffer and attempts to guess delimiters once the buffer is filled.
*
* @name push
* @memberof DelimiterGuesser.prototype
* @param {Buffer} [input] - an array of input
* @returns {void|Array} - the guessed delimiters if the buffer has been filled
*/
function push( input ) {
	var estimatedInputRowCount;
	var accumulator;
	var inputString;
	var difference;
	var metaCount;
	var guesses;
	var counts;
	var count;
	var rows;
	var char;
	var keys;
	var j;
	var i;
	var k;

	inputString = input.join( '' );
	estimatedInputRowCount = ( inputString.match(newlineRegex) || [] ).length;
	this.buffer += inputString;
	this.estimatedRowCount += estimatedInputRowCount;

	if ( this.estimatedRowCount < this.watermark ) {
		return;
	}

	/**
	* Counts the occurrences of a character in row.
	*
	* @private
	* @param {Array} [row] - the row to count the characters of
	* @returns {Object} the counts
	*/
	function mapper( row ) {
		counts = {};
		for ( i = 0; i < row.length; i++ ) { // count up occurences of each char in each row
			char = row[ i ];
			if ( counts[ char ] ) {
				counts[ char ] += 1;
			} else {
				counts[ char ] = 1;
			}
		}
		return counts;
	}

	rows = this.buffer
		.split( newlineRegex ) // rough split: newline characters can be in quoted field
		.map( mapper ); // an array of objects containing char:count pairs
	accumulator = {};
	for ( k = 0; k < rows.length; k++ ) {
		keys = Object.keys( rows[ k ] );
		for ( i = 0; i < keys.length; i++ ) {
			char = keys[ i ];
			count = rows[ k ][ char ];
			metaCount = 0;
			for ( j = 0; j < rows.length; j++ ) {
				if ( rows[ j ][ char ] === count ) {
					metaCount += 1;
				}
			}
			if ( !accumulator[ char ] ||
				accumulator[ char ].maxMeta < metaCount ) {
				accumulator[ char ] = {
					'maxMeta': metaCount, // the most common amount of times char occured count times in a row
					'count': count // the number of times char occurred in those rows
				};
			}
		}
	}

	/**
	* Sorts entries based on their meta counts.
	*
	* @private
	* @param {Array} [a] - the first entry
	* @param {Array} [b] - the second entry
	* @returns {Number} difference
	*/
	function comparator( a, b ) {
		difference = b[1].maxMeta - a[1].maxMeta;
		if (difference !== 0) {
			return difference;
		}
		return 1;
	}

	accumulator = Object.entries( accumulator )
		.sort( comparator );

	guesses = [];
	for ( i = 0; i < accumulator.length; i++ ) {
		if ( accumulator[ i ][ 1 ].maxMeta / estimatedInputRowCount > threshhold ) { // eslint-disable-line max-len
			guesses.push(accumulator[ i ][ 0 ]); // add the delimiter to guesses
		} else {
			break;
		}
	}

	return guesses; // an array of possible delimiters
}
setReadOnly( DelimiterGuesser.prototype, 'push', push);

/* eslint-enable no-invalid-this */
module.exports = DelimiterGuesser;
