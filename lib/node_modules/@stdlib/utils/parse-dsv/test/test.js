/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var string2buffer = require( '@stdlib/buffer/from-string' );
var DSVParser = require( './../lib' );
var fixtures = require( './js/fixtures/fixtures.json' );

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof DSVParser, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function properly parses csv files', function test( t ) {
	var delimiter;
	var quotechar;
	var expected;
	var headers;
	var parsed;
	var input;
	var data;
	var pd;
	var i;

	for ( i = 0; i < fixtures.length; i++ ) {
		data = fixtures[ i ].data;
		delimiter = data.delimiter;
		quotechar = data.quotechar;
		input = data.input;
		expected = fixtures[ i ].expected;
		pd = new DSVParser( delimiter, 'utf8', quotechar );

		// transform solutions with headers to 2d array versions
		if ( !( expected[ 0 ] instanceof Object ) ) {
			expected = [ expected ];
		} else if ( !Array.isArray( expected[ 0 ] ) ) {
			headers = Object.keys( expected[ 0 ] );
			expected = expected.map( function map( e ) {
				return Object.values( e );
			});
			expected.unshift( headers );
		}
		try {
			parsed = pd.incrparse(string2buffer(input));
			parsed = pd.incrparse(null);

			t.deepEqual( parsed, expected, 'should have same output when parsing ' + input);
		} catch ( e ) {
			t.ok( false, 'Recieved error: ' + e + ' when parsing ' + input + ' with delimiter ' + delimiter);
		}
	}
	t.end();
});
