/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*	 http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var fs = require( 'fs' );
var path = require( 'path' );
var tape = require( 'tape' );
var parseDSV = require( './../lib' );
var fixtureDirectory = path.join( __dirname, 'js/fixtures' );


tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof parseDSV, 'function', 'main export is a function' );
	t.end();
});


const ignored = ['regex.csv', 'term_arrays.csv', 'term_objects.csv', 'separator.csv'];
tape( 'the function properly parses csv files', function test( t ) {
	var solution;
	var headers;
	var parsed;
	var file;
	var pd;

	// test 8: [delimiter.csv] // single quotes instead of double
	// test 20: [regex.csv] // how is this valid csv
	// test 34: [term_arrays.csv] // custom delimiter? (*;*)
	// test 35: [term_objects.csv] // another custom delimiter? (^&^)

	fs.readdir( fixtureDirectory, function callback( err, files ) {
		if ( err ) {
			return;
		}
		files = files.filter( function filter( f ) {
			return f.endsWith( 'csv' );
		});
		for ( file of files ) {
			// if (ignored.includes(file)) continue;
			try {
				if ( file === 'separator.csv' )
					pd = parseDSV(';');
				else
					pd = parseDSV();
				var contents = fs.readFileSync(path.join( fixtureDirectory, file ), 'utf8');
				for (const char of contents) {
					parsed = pd([char]);
				}
				solution = require( path.join(fixtureDirectory, file.slice( 0, -4 ) + '.json' ) );

				// some ugly code to change things using headers
				// into the 2d array format also to change some 1d arrays
				// into 2d arrays
				if ( !( solution[0] instanceof Object ) ) {
					solution = [ solution ];
				} else if ( !Array.isArray(solution[ 0 ] ) ) {
					headers = Object.keys( solution[ 0 ] );
					solution = solution.map( function map( e ) {
						return Object.values( e );
					});
					solution.unshift( headers );
				}
				t.deepEqual( parsed, solution, 'should have same output when parsing ' + file);
			} catch(e) {t.ok(false, 'hit an error for file ' + file + ' error: ' + e)}
		}
		t.end();
	});
});
