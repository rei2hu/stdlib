/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*	 http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var fs = require( 'fs' );
var path = require( 'path' );
var tape = require( 'tape' );
var parseDSV = require( './../lib' );
var fixtureDirectory = path.join( __dirname, 'js/fixtures' );

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof parseDSV, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function properly parses csv files', function test( t ) {
	var solution;
	var headers;
	var parsed;
	var file;

	// test 3: headers
	// test 4: headers
	// test 7: [delimiter.csv] // single quotes instead of double
	// test 9: headers
	// test 10: headers
	// test 11: headers
	// test 12: headers
	// test 16: headers
	// test 18: headers
	// test 19: headers
	// test 20: [regex.csv] // how is this valid csv
	// test 23: headers
	// test 31: [separator.csv] // custom delimiter (;)
	// test 33: headers
	// test 34: headers
	// test 35: [term_arrays.csv] // custom delimiter? (*;*)
	// test 36: [term_objects.csv] // another custom delimiter? (^&^)
	// test 37: [utf8.csv] // utf8 woes

	fs.readdir( fixtureDirectory, function callback( err, files ) {
		if ( err ) {
			return;
		}
		files = files.filter( function filter( f ) {
			return f.endsWith( 'csv' );
		});
		for ( file of files ) {
			solution = require( path.join(fixtureDirectory, file.slice( 0, -4 ) + '.json' ) );
			parsed = parseDSV( path.join( fixtureDirectory, file ) );

			// some ugly code to change things using headers
			// into the 2d array format also to change some 1d arrays
			// into 2d arrays
			if ( !( solution[0] instanceof Object ) ) {
				solution = [ solution ];
			} else if ( !Array.isArray(solution[ 0 ] ) ) {
				headers = Object.keys( solution[ 0 ] );
				solution = solution.map( function map( e ) {
					return Object.values( e );
				});
				solution.unshift( headers );
			}
			t.deepEqual( parsed, solution );
		}
		t.end();
	});
});
