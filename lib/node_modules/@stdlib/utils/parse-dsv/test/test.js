/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*	 http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var fs = require( 'fs' );
var path = require( 'path' );
var tape = require( 'tape' );
var parseDSV = require( './../lib' );
var fixtureDirectory = path.join( __dirname, 'js/fixtures' );


tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof parseDSV, 'function', 'main export is a function' );
	t.end();
});


tape( 'the function properly parses csv files', function test( t ) {
	var expected;
	var headers;
	var parsed;
	var file;
	var data;
	var pd;

	// test 8: [delimiter.json] // single quotes instead of double
	// test 39: [term_arrays.json] // custom delimiter (:) // also entries surrounded by * which are removed in expected
	// test 40: [term_objects.json] // another custom delimiter (&) // also entries surrounded by ^ which are removed in expected

	fs.readdir( fixtureDirectory, function callback( err, files ) {
		if ( err ) {
			return;
		}
		for ( file of files ) {
			try {
				if ( file === 'separator.json' )
					pd = parseDSV(';');
				else if ( file === 'regex.json' )
					pd = parseDSV('|');
				else if ( file === 'term_arrays.json' )
					pd = parseDSV(':');
				else if ( file === 'term_objects.json' )
					pd = parseDSV('&');
				else if ( file === 'multichar_delim.json' )
					pd = parseDSV('asd');
				else if ( file === 'multichar_delim_earlyeof.json' )
					pd = parseDSV('asd');
				else if ( file === 'multichar_delim_prefix_end.json' )
					pd = parseDSV('asd');
				else if ( file === 'multichar_delim_repeat.json' )
					pd = parseDSV('aaaa');
				else if (file === 'multichar_delim_special.json' )
					pd = parseDSV('"delim');
				else
					pd = parseDSV();
				var test_file = require( path.join( fixtureDirectory, file ) );
				data = test_file.data;
				expected = test_file.expected;

				// some ugly code to change things using headers
				// into the 2d array format also to change some 1d arrays
				// into 2d arrays
				if ( !( expected[ 0 ] instanceof Object ) ) {
					expected = [ expected ];
				} else if ( !Array.isArray( expected[ 0 ] ) ) {
					headers = Object.keys( expected[ 0 ] );
					expected = expected.map( function map( e ) {
						return Object.values( e );
					});
					expected.unshift( headers );
				}

				for (const ch of data) {
					parsed = pd(ch);
				}
				if ( file === 'multichar_delim_prefix_end.json' ) {
					parsed = pd(null);
				}

				t.deepEqual( parsed, expected, 'should have same output when parsing ' + file);
			} catch(e) {t.ok(false, 'hit an error for file ' + file + ' error: ' + e)}
		}
		t.end();
	});
});
